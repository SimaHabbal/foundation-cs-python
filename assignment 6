#question 1
def is_palindrome(input_str):
    input_str = ''.join(c.lower() for c in input_str if c.isalnum())
    return input_str == input_str[::-1]
#question 2
def is_balanced(expression):
    stack = []
    opening_brackets = "({["
    closing_brackets = ")}]"
    bracket_mapping = {')': '(', '}': '{', ']': '['}

    for char in expression:
        if char in opening_brackets:
            stack.append(char)
        elif char in closing_brackets:
            if not stack or stack.pop() != bracket_mapping[char]:
                return False
    return not stack
#question 3
def stack_decode(message):
    stack = []
    result = ""
    for char in message:
        if char.isalpha() or char.isspace():
            stack.append(char)
        elif char == '*':
            if stack:
                result += stack.pop()
    while stack:
        result += stack.pop()
    return result


#question 4:linked list
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_at_location(self, position):
        if position == 0:
            self.head = self.head.next
            return

        current = self.head
        for _ in range(position - 1):
            if current is None:
                return
            current = current.next

        if current is None or current.next is None:
            return

        current.next = current.next.next


#question 5:graphs
class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, city1, city2):
        if city1 not in self.graph:
            self.graph[city1] = []
        self.graph[city1].append(city2)

    def has_route(self, start, end, visited=None):
        if visited is None:
            visited = set()

        visited.add(start)
        if start == end:
            return True

        for neighbor in self.graph.get(start, []):
            if neighbor not in visited and self.has_route(neighbor, end, visited):
                return True

        return False

    def print_directly_reachable(self, city):
        print(self.graph.get(city, []))

